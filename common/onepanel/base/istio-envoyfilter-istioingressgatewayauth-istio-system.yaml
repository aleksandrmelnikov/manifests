apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: istio-ingress-gateway-auth
  namespace: istio-system
spec:
  filters:
    - listenerMatch:
        portNumber: 443
        listenerType: GATEWAY
      filterName: envoy.lua
      filterType: HTTP
      insertPosition:
        index: FIRST
      filterConfig:
        inlineCode: |
          function get_value(keyvaluepairs, key)
            for value in string.gmatch(keyvaluepairs, key .. "=([^;]*)") do
              return value
            end
          end

          -- Called on the request path.
          function envoy_on_request(request_handle)
            print("Start call to auth 10:06PM - Change this for sanity.")

            local id_token = nil
            local cookies = request_handle:headers():get("cookie")
            print("Local cookies.\n")
            print(cookies)
            if cookies ~= nil then
              id_token = get_value(cookies, "auth%-token")
            end

            local headers =  {
              [":method"] = "HEAD",
              [":path"] = "/apis/v1beta1/auth/token",
              [":authority"] = "onepanel-core.onepanel.svc.local",
              ["grpc-metadata-fqdn"] = "app.alexcluster.onepanel.io",
              ["grpc-metadata-x-original-method"] = request_handle:headers():get(":method"),
              ["grpc-metadata-x-original-authority"] = request_handle:headers():get(":authority"),
              ["grpc-metadata-x-original-uri"] = request_handle:headers():get(":path")
            }

            print("headers")
            print(table.concat(headers,", "))
            print(headers)

            print("id_token.\n")
            print(id_token)

            if id_token ~= nil then
              headers["authorization"] = "Bearer " .. id_token
            end



            local response_headers, response_body = request_handle:httpCall(
                "outbound_.80_._.onepanel-core.onepanel.svc.cluster.local",
                headers,
                "",
                5000
            )

            print("Status header.\n")
            print(table.concat(response_headers,", "))
            print(response_headers[":status"])
            print("\n")
            if tonumber(response_headers[":status"]) ~= 200 then
              print("Not authorized.")
              request_handle:respond(
                {[":status"] = response_headers[":status"]},
                response_body
              )
            end
          end
